datos <- read.csv('tterreno_euro.csv')
datos <- na.omit(datos)
summary(datos)
library(factoextra)
library(FactoMineR)
q.acp = PCA(datos, graph=F, scale.unit = T)
datos <- na.omit(datos)
summary(datos)
datos$modelo <- NULL
summary(datos)
q.acp = PCA(datos, graph=F, scale.unit = T)
get_eig(q.acp)
100/14
fviz_eig(q.acp, addlabels=T, hjust=-0.3)+
labs(title="Gráfico de sedimentación")+
theme_minimal()
fviz_contrib(q.acp, choice="var", axes=1) +
labs(title="Contribuciones a la explicación del 1er factor")
fviz_contrib(q.acp, choice="var", axes=2) +
labs(title="Contribuciones a la explicación del 2º factor")
fviz_contrib(q.acp, choice="var", axes=3) +
labs(title="Contribuciones a la explicación del 3er factor")
fviz_eig(q.acp, addlabels=T, hjust=-0.3)+
labs(title="Gráfico de sedimentación")+
theme_minimal()
q.acp$var$cor[,1:5]
fviz_pca_ind(q.acp, geom="point",
habillage=datos$quiebra, addEllipses = T,
ellipse.level = 0.95)+
theme_minimal()
fviz_pca_ind(q.acp, geom="point",
habillage=datos$quiebra,
ellipse.level = 0.95)+
theme_minimal()
fviz_pca_ind(q.acp, geom="point",
habillage=datos$marca,
ellipse.level = 0.95)+
theme_minimal()
q.acp$var$cor[,1:5]
ACP = q.acp$ind$coord[,1:3]
ACP
ACP = q.acp$ind$coord[,1:5]
ACP
View(datos)
data <-read.csv('tterreno_euro.csv')
data$modelo <- NULL
log.ir <- log(data)
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,
center = TRUE,
scale. = TRUE)
data <- na.omit(data)
log.ir <- log(data)
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,
center = TRUE,
scale. = TRUE)
ir.pca
plot(ir.pca, type = "l")
summary(ir.pca)
q.acp$var$cor[,1:5]
get_eig(q.acp)
datos$marca <- NULL
summary(datos)
q.acp = PCA(datos, graph=F, scale.unit = T)
get_eig(q.acp)
fviz_eig(q.acp, addlabels=T, hjust=-0.3)+
labs(title="Gráfico de sedimentación")+
theme_minimal()
q.acp$var$cor[,1:5]
ACP = q.acp$ind$coord[,1:5]
ACP
View(ACP)
library(ggplot2)
ggplot(ACP,aes(x=DIM1,y=DIM2)) + geom_point()
ACP <- as.data.frame(ACP)
ggplot(ACP,aes(x=DIM1,y=DIM2)) + geom_point()
View(ACP)
ggplot(ACP,aes(x=Dim.1,y=Dim.2)) + geom_point()
datos <- read.csv('tterreno_euro.csv')
datos <- na.omit(datos)
ACP$marca <- datos$marca
ggplot(ACP,aes(x=Dim.1,y=Dim.2)) + geom_point(color=marca)
ggplot(ACP,aes(x=Dim.1,y=Dim.2)) + geom_point(color=acp$marca)
ggplot(ACP,aes(x=Dim.1,y=Dim.2)) + geom_point(color=ACP$marca)
View(datos)
View(ACP)
View(data)
get_eig(q.acp)
ACP = q.acp$ind$coord[,1:5]
ACP <- as.data.frame(ACP)
ACP$marca <- datos$marca
q.acp$var$cor[,1:5]
datos <- read.csv('tterreno_euro.csv')
datos <- na.omit(datos)
datos$modelo <- NULL
datos$marca <- NULL
summary(datos)
q.acp = PCA(datos, graph=T, scale.unit = T)
data <-read.csv('tterreno_euro.csv')
summary(ata)
summary(data)
data <- na.omit(data)
summary(data)
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
data.pca <- prcomp(data[,3:],
center = TRUE,
scale. = TRUE)
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
data.pca <- prcomp(data[,3:],
center = TRUE,
scale. = TRUE)
dim(data)
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
data.pca <- prcomp(data[,3:15],
center = TRUE,
scale. = TRUE)
summary(data.pca)
pve <- data.pca$sdev**2
ve <- pve/sum(pve)
plot(ve)
par(mfrow = c(1, 2))
# Plot variance explained for each principal component
plot(ve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
# Plot cumulative proportion of variance explained
plot(cumsum(ve), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
biplot(data.pca)
# Scatter plot observations by components 1 and 2
plot(wisc.pr$x[, c(1, 2)],
xlab = "PC1", ylab = "PC2")
# Scatter plot observations by components 1 and 2
plot(data.pca$x[, c(1, 2)],
xlab = "PC1", ylab = "PC2")
# Repeat for components 1 and 3
plot(data.pca$x[, c(1, 3)],
xlab = "PC1", ylab = "PC3")
# Scatter plot observations by components 1 and 2
plot(data.pca$x[, c(1, 2)],
xlab = "PC1", ylab = "PC2")
par(mfrow = c(1))
par()
# Scatter plot observations by components 1 and 2
plot(data.pca$x[, c(1, 2)],
xlab = "PC1", ylab = "PC2")
# Repeat for components 1 and 3
plot(data.pca$x[, c(1, 3)],
xlab = "PC1", ylab = "PC3")
# Repeat for components 1 and 3
plot(data.pca$x[, c(1, 3)], col=data$marca
xlab = "PC1", ylab = "PC3")
# Repeat for components 1 and 3
plot(data.pca$x[, c(1, 3)], col=data$marca,
xlab = "PC1", ylab = "PC3")
# Repeat for components 1 and 3
plot(data.pca$x[, c(1, 3)], col=data$modelo,
xlab = "PC1", ylab = "PC3")
par(mfrow = c(1, 1))
# Scatter plot observations by components 1 and 2
plot(data.pca$x[, c(1, 2)],
xlab = "PC1", ylab = "PC2")
# Repeat for components 1 and 3
plot(data.pca$x[, c(1, 3)],
xlab = "PC1", ylab = "PC3")
# Scatter plot observations by components 1 and 2
plot(data.pca$x[, c(1, 2)],
xlab = "PC1", ylab = "PC2")
kmedias <- kmeans(data[,3:15],2,nstart = 20)
plot(data.pca$x[, c(1, 2)],col=kmedias$cluster,
xlab = "PC1", ylab = "PC2")
kmedias <- kmeans(scale(data[,3:15]),2,nstart = 20)
plot(data.pca$x[, c(1, 2)],col=kmedias$cluster,
xlab = "PC1", ylab = "PC2")
plot(data.pca$x[, c(1, 2)],col=kmedias$cluster+1,
xlab = "PC1", ylab = "PC2")
for (i in 1:15) {
km.out <- kmeans(scale(data[,3:15]), centers = i, nstart=20)
# Save total within sum of squares to wss variable
wss[i] <- km.out$tot.withinss
}
# Plot total within sum of squares vs. number of clusters
plot(1:15, wss, type = "b",
xlab = "Number of Clusters",
ylab = "Within groups sum of squares")
wss <-0
for (i in 1:15) {
km.out <- kmeans(scale(data[,3:15]), centers = i, nstart=20)
# Save total within sum of squares to wss variable
wss[i] <- km.out$tot.withinss
}
# Plot total within sum of squares vs. number of clusters
plot(1:15, wss, type = "b",
xlab = "Number of Clusters",
ylab = "Within groups sum of squares")
kmedias <- kmeans(scale(data[,3:15]),4,nstart = 20)
plot(data.pca$x[, c(1, 2)],col=kmedias$cluster+1,
xlab = "PC1", ylab = "PC2")
install.packages('plot3D')
library(plot3D)
surf3D(x = data.pca$x[,1],
y = data.pca$x[,2],
z = data.pca$x[,3],
colkey=FALSE,
bty="b2",
main="Half of a Torus")
summary(data.pca$x)
str(data.pca$x)
x <- data.pca$x
x <- as.matrix(x)
surf3D(x = x[,1],
y = x[,2],
z = x[,3],
colkey=FALSE,
bty="b2",
main="Half of a Torus")
View(x)
str(x)
x <- as.matrix(x)
str(x)
x[,1]
str(x[,1])
x <- data.pca$x[,1]
x <- as.matrix(x)
surf3D(x = x[,1],
y = x[,2],
z = x[,3],
colkey=FALSE,
bty="b2",
main="Half of a Torus")
surf3D(x = x,
y = x[,2],
z = x[,3],
colkey=FALSE,
bty="b2",
main="Half of a Torus")
y <-data.pca$x[,2]
z <-  data.pca$x[,3]
y <- as.matrix(y)
z <- as.matrix(z)
surf3D(x = x,
y = y,
z = z,
colkey=FALSE,
bty="b2",
main="Half of a Torus")
surf3D(x = x,
y = y,
z = z)
z
surf3D(x = x,
y = y,
z = z)
str(data.pca$x)
library(plotly)
plot_ly(data =data.pca$x ,x = PC1,y = PC2, z = PC3,type = "scatter3d",showlegend = FALSE)
plot_ly(data =as.data.frame(data.pca$x) ,x = PC1,
y = PC2, z = PC3,type = "scatter3d",showlegend = FALSE)
plot_ly(data =as.data.frame(data.pca$x) ,x = PC1,
y = PC2, z = PC3,type = "scatter3d",showlegend = FALSE)
as.data.frame(data.pca$x)
str(as.data.frame(data.pca$x))
plot_ly(data =as.data.frame(data.pca$x) ,x = PC1,
y = PC2, z = PC3,type = "scatter3d",showlegend = FALSE)
prueba <-as.data.frame(data.pca$x)
plot_ly(data =prueba ,x = PC1,
y = PC2, z = PC3,type = "scatter3d",showlegend = FALSE)
View(prueba)
plot_ly(data =prueba ,x = PC1,
y = PC2, z = PC3,type = "scatter3d",showlegend = FALSE)
plot_ly(data =prueba ,x = ~PC1,
y = ~PC2, z = ~PC3,type = "scatter3d",showlegend = FALSE)
prueba$clust <- kmedias$cluster
plot_ly(data =prueba ,x = ~PC1,
y = ~PC2, z = ~PC3,color = ~clust,type = "scatter3d",showlegend = FALSE)
plot_ly(data =prueba ,x = ~PC1,
y = ~PC2, z = ~PC3,color = ~clust,type = "scatter3d",showlegend = FALSE)
prueba$clust <- as.factor(kmedias$cluster)
plot_ly(data =prueba ,x = ~PC1,
y = ~PC2, z = ~PC3,color = ~clust,type = "scatter3d",showlegend = FALSE)
kmedias <- kmeans(scale(data[,3:15]),2,nstart = 20)
prueba$clust2 <- as.factor(kmedias$cluster)
plot_ly(data =prueba ,x = ~PC1,
y = ~PC2, z = ~PC3,color = ~clust2,type = "scatter3d",showlegend = FALSE)
